function Conway(columns, rows) {	this.columns = columns; // number of columns	this.rows = rows; // number of rows	this.cells = [];	this.prevcells = [];	var i, j;	for (i = 1; i <= columns; i++) {		this.cells[i] = new Array();		this.prevcells[i] = new Array();		for (j = 1; j <= rows; j++) {			this.cells[i][j] = 0;			this.prevcells[i][j] = 0;		}	}	/*	 * this.cells[18][23] = 1; this.cells[18][24] = 1; this.cells[19][22] = 1;	 * this.cells[19][23] = 1; this.cells[20][23] = 1;	 */	this.cells[1][2] = 1;	this.cells[2][3] = 1;	this.cells[3][1] = 1;	this.cells[3][2] = 1;	this.cells[3][3] = 1;}Conway.prototype.getAliveNeighbors = function(i, j) {	var x = 0, u, v;	for (u = -1; u <= 1; u++) {		for (v = -1; v <= 1; v++) {			if (typeof (this.cells[i + u]) != 'undefined'					&& typeof (this.cells[i + u][j + v]) != 'undefined'					&& this.cells[i + u][j + v] == 1) {				if (u != 0 || v != 0)					x++;			}		}	}	return x;}Conway.prototype.step = function() {	var adjacent, i, j, val;	var nextcells = [];	for (i = 1; i <= this.columns; i++) {		nextcells[i] = [];		for (j = 1; j <= this.rows; j++) {			val = 0;			adjacent = this.getAliveNeighbors(i, j);			switch (this.cells[i][j]) {			case 0:				if (adjacent == 3)					val = 1;				break;			case 1:				if (adjacent == 2 || adjacent == 3)					val = 1;				break;			}			nextcells[i][j] = val;		}	}	this.prevcells = this.cells;	this.cells = nextcells;}// ConwayCanvasRenderer constructorfunction ConwayCanvasRenderer(conway, canvas, fillColor, clearCellColor) {	this.conway = conway;	this.canvas = canvas;	this.context = canvas.getContext("2d");	this.width = canvas.width / this.conway.columns;	this.height = canvas.height / this.conway.rows;	this.time;	this.fillColor = fillColor;	this.clearCellColor = clearCellColor;	this.drawGrid();}// ConwayCanvasRenderer methodsConwayCanvasRenderer.prototype.render = function() {	//this.clearCells();	this.fillCells();}ConwayCanvasRenderer.prototype.drawGrid = function() {	/* this.context.beginPath(); */	/* var i = 0; */	for (i = 1; i < this.conway.columns; i++) {		this.context.moveTo(this.width * i + 0.5, 0);		this.context.lineTo(this.width * i + 0.5, this.canvas.height);	}	for (i = 1; i < this.conway.rows; i++) {		this.context.moveTo(0, this.height * i + 0.5);		this.context.lineTo(this.canvas.width, this.height * i + 0.5);	}	this.context.stroke();}ConwayCanvasRenderer.prototype.fillCells = function() {	var i, j;	for (j = 1; j < this.conway.columns + 1; j++) {		for (i = 1; i < this.conway.rows + 1; i++) {			if (this.conway.cells[j][i]) {				this.context.fillStyle = this.fillColor;				this.context.fillRect((i-1) * this.height + 1, (j-1) * this.width + 1,						this.height - 1, this.width - 1);			}			else if (this.conway.prevcells[j][i]) {				this.context.fillStyle = this.clearCellColor;				this.context.fillRect((i-1) * this.height + 1, (j-1) * this.width + 1,						this.height - 1, this.width - 1);							}		}	}}ConwayCanvasRenderer.prototype.step = function() {	this.conway.step();	this.render();}ConwayCanvasRenderer.prototype.start = function(framerate) {	var self = this;	this.render();	this.time = setInterval(function() {		self.step();	}, Math.round(1000 / framerate));}ConwayCanvasRenderer.prototype.stop = function() {	clearCellColorInterval(this.time);}